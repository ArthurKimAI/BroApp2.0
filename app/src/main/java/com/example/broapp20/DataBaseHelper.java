package com.example.broapp20;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import androidx.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;

public class DataBaseHelper extends SQLiteOpenHelper {
    public static final String CUSTOMER_TABLE = "CUSTOMER_TABLE";
    public static final String COLUMN_CUSTOMER_NAME = "CUSTOMER_NAME";
    public static final String COLUMN_TIME = "TIME";
    public static final String COLUMN_DATE = "DATE";
    public static final String COLUMN_ID = "ID";

    public DataBaseHelper(@Nullable Context context) {
        super(context, "customer.db", null, 1);

    }

    //this is called when database is accessed for the first time. There should be a code that creates a DB.
    @Override
    public void onCreate(SQLiteDatabase sqLiteDatabase) {
        String createTableStatement = " CREATE TABLE " + CUSTOMER_TABLE + " (" + COLUMN_ID + " PRIMARY KEY AUTOINCREMENT, " + COLUMN_CUSTOMER_NAME + " TEXT, " + COLUMN_TIME + " DOUBLE, " + COLUMN_DATE + " DOUBLE)";

        sqLiteDatabase.execSQL(createTableStatement);
    }

    //this is called when database was updated. It prevents the whole app from crashing when design of DB was changed.
    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {

    }

    public boolean addOne(CustomerModel customerModel) {

        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues cv = new ContentValues(); //Stores data in pairs: cv.put("name", value) cv.getString("name")
        //aka HashMap
        cv.put(COLUMN_CUSTOMER_NAME, customerModel.getName());
        cv.put(COLUMN_DATE, customerModel.getDate());
        cv.put(COLUMN_TIME, customerModel.getTime());
        //No id column because it's autoincrement aka autogenerated.

        long insert = db.insert(CUSTOMER_TABLE, null, cv);
        if (insert == -1) {
            return false;
        } else {
            return true;
        }
    }

    public List<CustomerModel> getEveryone(){
        List<CustomerModel> returnList = new ArrayList<>();

        String queryString = "SELECT * FROM " + CUSTOMER_TABLE;

        SQLiteDatabase db = this.getReadableDatabase();

        Cursor cursor = db.rawQuery(queryString, null); // Cursor is a result set, raw query is data request by parameters

        if (cursor.moveToFirst()){
            //loop through the cursor (Result Set) and create new customer object. Then put them into the result list
            do{
                String customerName = cursor.getString(0);
                float appointmentTime = cursor.getFloat(1);
                float appointmentDate = cursor.getFloat(2);

                CustomerModel newCustomer = new CustomerModel(customerName, appointmentTime, appointmentDate);
                returnList.add(newCustomer);

            } while (cursor.moveToNext());
        }
        else{

        }
        //closing both we assign others to work with those
        cursor.close();
        db.close();

        return returnList;
    }

    public boolean deleteOne(CustomerModel customerModel) {
        //find customerModel in database. if it was found return true and delete it, otherwise return false.

        SQLiteDatabase db = this.getWritableDatabase();
        String queryString = "DELETE FROM " + CUSTOMER_TABLE + " WHERE " + COLUMN_CUSTOMER_NAME + " = " + customerModel.getName();

        Cursor cursor = db.rawQuery(queryString, null);

        if (cursor.moveToFirst()){
            return true;
        }else{
            return false;
        }
    }
}
